//------------------------------------------------------------------------------
// <wsdl2code-generated>
// This code was generated by http://www.wsdl2code.com iPhone version 1.5
// Date Of Creation: 11/5/2013 1:51:25 PM
//
//  Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code Version
//

#import "catalogCategoryEntityNoChildren.h" 


@implementation catalogCategoryEntityNoChildren

- (id)initWithArray:(NSArray *)array
{
    self = [super init];
    if (self)
    {
        @try {
            for (int i0 = 0; i0 < [array count]; i0++)
            {
                if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"category_id"]==NSOrderedSame))
                {
                    NSString *nodeContentValue = [[NSString alloc]initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    [self setCategory_id:[nodeContentValue intValue]];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"parent_id"]==NSOrderedSame))
                {
                    NSString *nodeContentValue = [[NSString alloc]initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    [self setParent_id:[nodeContentValue intValue]];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"name"]==NSOrderedSame))
                {
                    NSString *nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setName:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"is_active"]==NSOrderedSame))
                {
                    NSString *nodeContentValue = [[NSString alloc]initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    [self setIs_active:[nodeContentValue intValue]];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"position"]==NSOrderedSame))
                {
                    NSString *nodeContentValue = [[NSString alloc]initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    [self setPosition:[nodeContentValue intValue]];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"level"]==NSOrderedSame))
                {
                    NSString *nodeContentValue = [[NSString alloc]initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    [self setLevel:[nodeContentValue intValue]];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"include_in_menu"]==NSOrderedSame))
                {
                    NSString *nodeContentValue = [[NSString alloc]initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    [self setInclude_in_menu:[nodeContentValue intValue]];
                }
            }
        }
        @catch(NSException *ex){
        }
    }
    return self;
}


- (NSString *)toString:(BOOL)addNameWrap
{
    NSMutableString *nsString = [NSMutableString string];
    if (addNameWrap == YES)
        [nsString appendString:@"<catalogCategoryEntityNoChildren>" ];
    [nsString appendFormat:@"<category_id>%d</category_id>" , [self category_id]];
    [nsString appendFormat:@"<parent_id>%d</parent_id>" , [self parent_id]];
    if (self.name != nil)
    {
        [nsString appendFormat:@"<name>%@</name>" , [self name]];
    }
    [nsString appendFormat:@"<is_active>%d</is_active>" , [self is_active]];
    [nsString appendFormat:@"<position>%d</position>" , [self position]];
    [nsString appendFormat:@"<level>%d</level>" , [self level]];
    if (addNameWrap == YES)
        [nsString appendString:@"</catalogCategoryEntityNoChildren>" ];
    return nsString;
}


#pragma mark - NSCoding

- (id)initWithCoder:(NSCoder *)decoder
{
    self = [super init];
    if (self)
    {
        self.category_id = [decoder decodeInt32ForKey:@"category_id"];
        self.parent_id = [decoder decodeInt32ForKey:@"parent_id"];
        self.name = [decoder decodeObjectForKey:@"name"];
        self.is_active = [decoder decodeInt32ForKey:@"is_active"];
        self.position = [decoder decodeInt32ForKey:@"position"];
        self.level = [decoder decodeInt32ForKey:@"level"];
    }
    return self;
}


- (void)encodeWithCoder:(NSCoder *)encoder
{
    [encoder encodeInt32:self.category_id forKey:@"category_id"];
    [encoder encodeInt32:self.parent_id forKey:@"parent_id"];
    [encoder encodeObject:self.name forKey:@"name"];
    [encoder encodeInt32:self.is_active forKey:@"is_active"];
    [encoder encodeInt32:self.position forKey:@"position"];
    [encoder encodeInt32:self.level forKey:@"level"];
}


- (id)copyWithZone:(NSZone *)zone
{
    catalogCategoryEntityNoChildren *finalCopy = [[[self class] allocWithZone:zone] init];
    
    finalCopy.category_id = self.category_id;
    
    finalCopy.parent_id = self.parent_id;
    
    NSString *copy3 = [self.name copy];
    finalCopy.name = copy3;
    
    finalCopy.is_active = self.is_active;
    
    finalCopy.position = self.position;
    
    finalCopy.level = self.level;
    
    return finalCopy;
}

@end
