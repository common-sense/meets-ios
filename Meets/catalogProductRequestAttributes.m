//------------------------------------------------------------------------------
// <wsdl2code-generated>
// This code was generated by http://www.wsdl2code.com iPhone version 1.5
// Date Of Creation: 11/5/2013 1:51:25 PM
//
//  Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code Version
//

#import "catalogProductRequestAttributes.h" 


@implementation catalogProductRequestAttributes

- (id)initWithArray:(NSArray *)array
{
    self = [super init];
    if (self)
    {
        @try {
            for (int i0 = 0; i0 < [array count]; i0++)
            {
                if ( ([[array objectAtIndex:i0] objectForKey:@"nodeChildArray"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"attributes"]==NSOrderedSame))
                {
                    NSArray *array1 = [[array objectAtIndex:i0] objectForKey:@"nodeChildArray"];
                    NSMutableArray *dataArray1 = [[NSMutableArray alloc]init];
                    for (int i1 = 0; i1<[array1 count];i1++)
                    {
                        NSString *item = [[NSString alloc] initWithString:[[array1 objectAtIndex:i1] objectForKey:@"nodeContent"]];
                        [dataArray1  addObject:item];
                    }
                    [self setAttributes:dataArray1];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeChildArray"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"additional_attributes"]==NSOrderedSame))
                {
                    NSArray *array1 = [[array objectAtIndex:i0] objectForKey:@"nodeChildArray"];
                    NSMutableArray *dataArray1 = [[NSMutableArray alloc]init];
                    for (int i1 = 0; i1<[array1 count];i1++)
                    {
                        NSString *item = [[NSString alloc] initWithString:[[array1 objectAtIndex:i1] objectForKey:@"nodeContent"]];
                        [dataArray1  addObject:item];
                    }
                    [self setAdditional_attributes:dataArray1];
                }
            }
        }
        @catch(NSException *ex){
        }
    }
    return self;
}


- (NSString *)toString:(BOOL)addNameWrap
{
    NSMutableString *nsString = [NSMutableString string];
    if (addNameWrap == YES)
        [nsString appendString:@"<catalogProductRequestAttributes>" ];
    if (self.attributes != nil)
    {
        [nsString appendFormat:@"<attributes>"];
        for (NSString *elm in self.attributes)
        {
            [nsString appendFormat:@"<string>%@</string>", elm];
        }
        [nsString appendFormat:@"</attributes>"];
    }
    if (self.additional_attributes != nil)
    {
        [nsString appendFormat:@"<additional_attributes>"];
        for (NSString *elm in self.additional_attributes)
        {
            [nsString appendFormat:@"<string>%@</string>", elm];
        }
        [nsString appendFormat:@"</additional_attributes>"];
    }
    if (addNameWrap == YES)
        [nsString appendString:@"</catalogProductRequestAttributes>" ];
    return nsString;
}


#pragma mark - NSCoding

- (id)initWithCoder:(NSCoder *)decoder
{
    self = [super init];
    if (self)
    {
        self.attributes = [decoder decodeObjectForKey:@"attributes"];
        self.additional_attributes = [decoder decodeObjectForKey:@"additional_attributes"];
    }
    return self;
}


- (void)encodeWithCoder:(NSCoder *)encoder
{
    [encoder encodeObject:self.attributes forKey:@"attributes"];
    [encoder encodeObject:self.additional_attributes forKey:@"additional_attributes"];
}


- (id)copyWithZone:(NSZone *)zone
{
    catalogProductRequestAttributes *finalCopy = [[[self class] allocWithZone:zone] init];
    
    NSMutableArray *cpy1 = [self.attributes copy];
    finalCopy.attributes = cpy1;
    
    NSMutableArray *cpy2 = [self.additional_attributes copy];
    finalCopy.additional_attributes = cpy2;
    
    return finalCopy;
}

@end
